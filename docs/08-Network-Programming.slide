Network Programming with Go
Concepts of Programming Languages
28 Nov 2022
Tags: go, programming, concurrent, go routines, channels

Sebastian Macke
Rosenheim Technical University
Sebastian.Macke@th-rosenheim.de
https://www.qaware.de

* Last lecture
- Concurrent programming in general
- Virtual threads of Go
- Coroutines
- Blocking calls
- Atomic operations
- Synchronization and messaging (channels)
- Multi-way concurrent control (select)
- Dining philosophers problem

* Info

- Lecture in one week: Systems Programming
- *Install* *Linux*!
- For Windows, the Windows Subsystem (WSL2) is sufficient.
- Otherwise install a virtual machine.

* About this Lecture

- Go was designed in the era of multicore, networked machines as light weight alternative to Java and C++.
- Hence we should take a look into the network capabilities of Go.
- Go provides a simple way to implement networking.
- Virtual Threads with non-blocking behavior should be ideal for receiving requests and waiting for database etc.
- So far, in all major languages, networking is not part of the language itself but provided via librarys.

: * Message Passing
: Message Passing is invoking behavior on a separate process (not necessarily on the same computer) by sending messages.

: Models for exchanging messages:

: - point to point (symmetric/asymmetric, synchronous/asynchronous)
: - remote procedure calls (RPC, RMI)
: - broadcasting and multicasting

: Sender schickt Nachricht an Empf√§nger
: symmetrisch: beide kennen sich / asymmetrisch: nur ein eine Richtung
: synchron: blockiert bis Nachricht gelesen
: RPI: wie lokaler Prozeduraufruf
: https://github.com/qaware/cloudcomputing/tree/master/01-kommunikation/vorlesung

* The Internet protocol stack
.image ./img/protocols.svg 300 _

- Many protocols power the Internet
- Each protocol operates at a different layer, building a stack of protocols
- The diagram is very simplified

* TCP - Transmission Control Protocol

* TCP - Transmission Control Protocol

- TCP is currently the basis for almost all network communication
- TCP is a connection oriented protocol and prevents packet loss
- Allows consistent data streams in both direction between two computers
- It also uses port numbers to identify services on a host

* Networking was heavy weighted in the past
C language example

   int main()
   {
       int sockfd, connfd, len;
       struct sockaddr_in servaddr, cli;
       sockfd = socket(AF_INET, SOCK_STREAM, 0);
       if (sockfd == -1) {
           printf("socket creation failed...\n"); exit(0);
       }
       bzero(&servaddr, sizeof(servaddr));
       servaddr.sin_family = AF_INET;
       servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
       servaddr.sin_port = htons(PORT);

       if ((bind(sockfd, (SA*)&servaddr, sizeof(servaddr))) != 0) {
           printf("socket bind failed...\n"); exit(0);
       }
       if ((listen(sockfd, 5)) != 0) {  // equivalent in line 2 on next slide
           printf("Listen failed...\n"); exit(0);
       }
   ....

* Listen to a socket in Go

.play ../src/servers/tcp/echo/server/echo.go /func/,

- Listens to a tcp socket on port 8081
- Each accepted connection is executed in its own go routine

* HTTP Request via TCP

.play ../src/servers/tcp/echo/client/client.go /func/,

*io.Copy* copy data stream from second parameter to first parameter
- First parameter implements write(p []byte) (n int, err error)
- Second parameter implements read(p []byte) (n int, err error)

* Exercise 8.1: Warm up

Open a TCP connection to *simulationcorner.net* on port *54321* and, read from the data stream and write the output onto the screen in an infinite loop.

* Port Scanner

.play ../src/servers/tcp/portscanner/simple/main.go /func/,

- Searches for open TCP ports on a remote machine

* Remote Procedure Call

* Remote Procedure Call

RPC is an attempt to bring the style of programming into the network world
It is a mechanism for calling remote procedures on a remote machine

- The client side packages the request into a network message and transfers it to the server.
- The server receives the request and executes the procedure.
- The server returns the result to the client.
- The client receives the result and returns it to the caller.

Go offers a simple way to implement RPC via the *net/rpc* package via a TCP connection

* RPC - Remote procedure call in Go
The server

.play ../src/distributed/rpc/multiply/server/server.go /type/,

* RPC - Remote procedure call in Go
The client

.play ../src/distributed/rpc/multiply/client/client.go /type/,

* Exercise: Remote Procedure Call

Implement in Go a *net/rpc* client TCP connection via rpc.Dial against the URL *simulationcorner.net:1234* . This interface offers two remote procedures calls.

A function, in which you receive a rune

    var dummy struct {}
    var output rune
    err := client.Call("Session.Read", &dummy, &output)

and a function in which you have to provide a rune

    var input rune
    err := client.Call("Session.Write", &input, &dummy)

Create for each routine its own goroutine and call these functions in an infinite loop. Write the output of *Session.Read* to the terminal. As input for *Session.Write* use os.Stdin to read a rune from keyboard via

    reader := bufio.NewReader(os.Stdin)
    input, _, err := reader.ReadRune()

* Service-oriented Request-Response communication with gRPC

- Solution from Google for remote procedure communication, which is independent of the language
- Developed by Google in 2015
- HTTP/2 transport protocol
- Protocol buffers for serialization
- Communication ways
- - Request-Response
- - Client-side Streaming
- - Server-side Streaming
- - Bidirectional Streaming

- Generator for client and server
Available for C++, C#, Dart, Go, Java, kotlin, Node-Js, Objective-C, PHP, Python, Ruby

* gRPC

.image ./img/grpc.png 500 _

* HTTP

* Hypertext Transfer Protocol

- Application Layer protocol based on TCP
- Mainly originally used to transfer Hypertext documents
- Classic operation mode: Client sends request, server sends response. Client sends next request ....

History:

- HTTP 1.0: 1989 developed at CERN by Tim Berners-Lee
- HTTP 1.1: Connection Pooling / Keep-Alive, Caching, Authentification, addtional metainformation, ...
- HTTP 2.0: Binary-Protocol, Multiplexing, Encryption as Standard, Server-Push
- HTTP 3.0: Still in development. Switch from TCP to UDP. Faster connection.

* Example communication

Client sends the request to GET the content of the root path "/index.html"

    GET /index.html HTTP/1.1
    Host: www.example.com

Server responds via

    HTTP/1.1 200 OK
    Date: Mon, 23 May 2021 16:14:34 GMT
    Content-Type: text/html; charset=utf-8
    Content-Length: 155
    Server: Apache

    <html>
    ....

- Responds is a *text/html* document with Unicode UTF-8 encoding and has a size of 155 bytes

* HTTP Request via TCP

.play ../src/servers/tcp/http/http.go /func/,

* A Simple HTTP File Server
.play ../src/servers/fileserver/main.go /func/,
- File server for static content.
- Already optimized for maximum performance. No tweaking in any form necessary.

Python equivalent is still simpler

   python -m http.server 8080



* Transfer formats

* There are different types of standardized transfer formats

- JSON (Text Format)
- XML (Text Format)
- Protobuf (Binary Format)

Truly portable data.
All can be transported via HTTP.

* JSON - JavaScript Object Notation

  {
      "coord": {
          "lon": -122.08,
          "lat": 37.39
        },
        "weather": [
            {
                "main": "Clear",
                "description": "clear sky",
            }
        ],
  }

Types:
- bool
- floating point number
- strings
- arrays
- null

* XML - eXtensible Markup Language

  <?xml version="1.0" encoding="UTF-8"?>
  <WeatherResponse>
    <coords lon="-122.08" lat="37.39"/>
    <weather>
      <main>Clear</main>
      <description>clear sky</description>
    </weather>
  </WeatherResponse>

- XML is a subset of HTML
- Huge ecosystem exists for XML. Schema definitions. XML transformation formats

* Protocol Buffers

  syntax = "proto3"
  message SearchRequest {
      string query = 1
      int32 page_number = 2
      int32 result_per_page = 3
  }

- published by Google in 2008
- language neutral
- platform independent
- binary format
- Auto generated code by a protobuf compiler for the various languages

* Marshalling and Unmarshalling
- Go offers a way to transform structs to the transfer formats and vice versa
.play ../src/distributed/encoding/json/json.go /type Weather/,

* XML

.play ../src/distributed/encoding/xml/xml.go /type Weather/,

* Service-oriented Request-Response Communication with REST

* REST is a paradigm for application services

- Used mainly for Web Application Programming Interfaces
- Based on the HTTP Protocol
- Data is transfered via JSON or XML
- Stateless: The communication between server and client is stateless. The server "forgets" you after the request is done.
- Everything is a resource: A resource in the system should have only one logical URI
- Uniform interfaces based on HTTP. (GET , POST, PUT, DELETE). Errors are returned via HTTP status codes.

* REST APIs with Go

* Example: Weather API with Go

.play ../src/servers/rest/client/client.go /func main/,

* Example: Weather API with Go: Short version

.play ../src/servers/rest/client_short/client_short.go /func main/,

* Exercise

Call the Github API with Go to receive the repositories with the most stars and the query "awesome"

.link https://api.github.com/search/repositories?sort=stars&order=desc&q=awesome

- Use
.link https://mholt.github.io/json-to-go/
to instantly create a Go structure from an arbitrary JSON.

* REST API with Go

.play ../src/servers/rest/server/server.go /func/,

Each request is processed in its separate go routine.

To test the rest interface you can use tools such as
- curl, httpie, Postman, Your own Go Rest call code, Web Browser

: * Comparison with Java I
: .code ../src/servers/benchmark/javasimple/Server.java /public class/,

* Comparison with Java (Spring Boot)

    @SpringBootApplication
    @RestController
    public class RestdemoApplication {
        public static void main(String[] args) {
            SpringApplication.run(RestdemoApplication.class, args);
        }

        @GetMapping("/")
        public String index() {
            return "Greetings from Spring Boot!";
        }
    }

- Frameworks such as Spring Boot offer a declarative approach via annotations

* Exercise

Create a Microservice with a REST API for a key value store.
.link https://github.com/s-macke/concepts-of-programming-languages/blob/WS_2021/docs/exercises/Exercise8.md

* Info

- Lecture in one week: Systems Programming
- *Install* *Linux*!
- Prefer a Debian based distribution.
- For Windows, the Windows Subsystem (WSL2) is sufficient.
- Otherwise install a virtual machine.
