Lisp and Forth - Languages from the Past
Concepts of Programming Languages
14 Dec 2020
Tags: go, programming, logic

Sebastian Macke
Rosenheim Technical University
Sebastian.Macke@th-rosenheim.de
https://www.qaware.de

* Some thoughts about this lecture

- In history there has been developments in language design which had a significant influence
- They had unique ideas from which we can learn from
- These languages are used only a niche language today
- Lisp and Forth are two of those candidates

* Lisp - List processing

: https://www.slideshare.net/dataminingtools/introduction-to-lisp-3434723
: https://auth0.com/blog/why-developers-should-look-into-clojure/

* History

- Invented by John McCarthy in 1958 at MIT
- First implementation in 1960
- Lisp is/was closely connected to AI research
- Still used today
- Lisp has spawned many variations of the language with its latest version: Clojure


* Features

- Example of elegant minimalist language (uniform syntax, s-expressions)
- First functional language
- First language with garbage collection
- First language with with built in support for lists and tree like data structures
- First language with dynamic typing
- Code is data, Data is Code
- Metaprogramming
- Atomic storage management
- Interactive environment
- Standard macros

* S- Expressions

* Syntax (Data Structures)

- Lists

- Atoms

- Prefix notation

* Function definition


* Calculations

* Comparing

* Variables
- Assigning functions

* Nil represents false and an empty list

* Conses and lists

* Exercise




https://www.tutorialspoint.com/execute_lisp_online.php

* Lisp Cheat Sheet

    (+ [number] [number] ...)         add math operations
    (- [number] [number] ...)         subtract from the first number
    (< [number1] [number2])           returns true if number1 < number2

    (print [number])                  prints the value
    (if [condition] [then] [else])    if condition

    `([elem1] [elem2] [elem3] ...)     list if quoted and hence not executed
    (setq [name] [elem])               assigns variable
    (eval `([code]))                   evaluate code
    (car [elem1] [elem2] ...)          return elem1
    (cdr [elem1] [elem2] ...)          return elem2 and all subsequent elements
    (defun [name] ([params]) [code] [code] ...)   define function

* Summary

- Lisp is still alive and has several descendants such as Racket, Common Lisp, Scheme
- Is still taught at universities as being unique



* Forth - Easier than Assembler

https://www.tutorialspoint.com/execute_forth_online.php

* History

- Invented by Charles H. "Chuck" Moore in 1968
- Used in the early microcomputers. Implementations for almost computer types.
- Standardized ANSI Forth in 1994

* Features

- The minimalist language you can imagine
- Stack machine with reverse polish notation
- Procedural language
- No types, just integers
- Direct access to call stack
- Most simple lexer of a language you can imagine
- Compiles to threaded code (something in between bytecode and compiled code). Code is very compressed.
- Entire development environmentâ€”including compiler, editor, and user programs fits in a few hundred bytes
- Compiled programs usually ship with an embedded interpreter.
- much broader range to define "word" names.

* Postfix notation or Reverse Polish Notation
- The order of operations in Forth is Postfix (or Reverse Polish Notation)

* Stack operations
- dup - Duplicated the top of the stack
- swap - swaps the top 2 elements
- drop - drops the top element of the stack
- rot - rotate the top 3 numbers

* store and fetch variables

* Functions: Adding a word

* Conditionals

* Control Structures

* If then else

* do loop

* begin until

* strings

* Arrays

* Some thoughts

- You can write a forth interpreter in less then 512 bytes

https://www.slideserve.com/holly/the-forth-language

* Forth cheat sheet

Forth is a compiled and interpreted language at the same time

* Forth Cheat Sheet
    words           lists all word in the dictionary
    .s              show the stack

    +, -, *, /     math operations
    <, >, =        test if the numbers are smaller, larger, equal

    .               pops the top element from the stack and prints its number
    drop            drop a stack item
    dup             duplicate a stack item
    rot             rotate the top 3 elements in the stack

    ( and \         Comments

    : [name] ... ;  Function declaration
    ." ..."         Print the string
    .S" ..."
    type            prints the string on the stack
    cr              prints a new line

    variable [name] defines a int variable
    [variable]      puts the memory position of the variable onto the stack
    @               receives the content from the memory location
    !               stores the content into the memory location


* Forth Examples
https://skilldrick.github.io/easyforth/#conditionals-and-loops
https://www.tutorialspoint.com/execute_forth_online.php