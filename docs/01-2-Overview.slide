Concepts of Programming Languages
Overview
05 Oct 2020
Tags: go, programming, master

Sebastian Macke
Rosenheim Technical University
sebastian.macke@qaware.de
http://www.qaware.de

* Categorization of programming languages
- Programming languages can be categorized in many ways
  - Chronologically
  - Popularity
  - Language Paradigma
  - Usage
  - Orthogonal Properties of the language (e. g. compiled vs. interpreted)
  - Features

.link https://en.wikipedia.org/wiki/List_of_official_languages  Languages Alphabetically
.link https://en.wikipedia.org/wiki/List_of_programming_languages_by_type Languages By Type


* Evolution of Programming Languages
.link img/01-languages.png
.image img/01-languages.png 500 _

* Fortran I looks familiar

.image img/01-fortran0.png 500 _

: Zeige vielleicht https://www.youtube.com/watch?v=dUKWDxKAlk4

* But not all used equal
.image img/01_redmonk_2021.png 600 _

: Umfrage, welche Sprachen kennt ihr?

* Types of Programming Languages
* Programming language Paradigms
- *Non-structured*: Assembler, First Programming languages with goto
- *Structured* *or* *Imperative*: conditionals, repetition, blocks, functions
- *Procedural* (Control Structures and Procedures, functions with side effects): Fortran / Algol / Pascal / *C*
- *Object* *Oriented* (Classes and Objects): Smalltalk / Objective C / C++ / Eifel / *Java* / C#
- *Declarative*: (Tell what to do, not how): Domain Specific Languages, HTML, SQL, ... (A more general concept, See next slides)
- *Functional* (Lambdas + Closures): Haskell, Erlang, F#
- *Logic*: (facts/statements): Prolog
- *Best* *of* *Breed*: Kotlin, Scala, Rust, JS, *Go*

: Game Of Live ist nicht in der Liste.
: TODO: Read https://dev.to/tamerlang/the-simple-guide-to-programming-paradigms-36o#structured-programming

: Imperativ = Skripte schreiben
: Prozedural = Aufspalten in Teilprogramme, Daten und Routinen trennen (auch: *Modular*)
: OOP = Daten+Routinen sind Einheit! (Im Business machen wir zwar OOP, aber eigentlich nur prozedural)
: Deklarativ = nicht WIE, sondern WAS (kein Lösungsweg, sondern Ergebnis)
: Deklarativ: expresses the logic of a computation without describing its control flow.
: Funktional = Funktion als First Order Type, Seiteneffektfrei
: Logisch = Aufgabenstellung und Prämissen als logische Ausdrücke
: Es gibt so viele Ausprägungen, dass man Sprachen oder Features nicht eindeutig den Paradigmen zuordnen kann.

* Imperative vs Declarative I

: express what the function must do without defining how to achieve it

- Imperative

    <html>
        <body>
            <script>
                let btn = document.createElement("button");
                btn.innerHTML = "Click Me";
                document.body.appendChild(btn);
            </script>
        </body>
    </html>

- Declarative

    <html>
        <body>
            <button>Click Me</button>
        </body>
    </html>

* Degress of Declarative Code

- A list is given. Calculate the sum.

    List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5);

- Imperative

    int sum = 0;
    for(int i = 0; i < integers.size(); i++) {
        sum += integers.get(i);
    }
- Imperative / Declarative: A little bit of both

    sum = 0;
    integers.forEach(n -> {sum += n;});

    sum = integers.stream().mapToInt(Integer::intValue).sum();

- Declarative

    int sum = math.sum(integers);

* Areas for Programming Languages
- Application Programming (small / large scale, web, central, cloud)
- Systems Programming
- Network Programming / Distributed Systems 
- Realtime Systems
- User Interface Programming
- Embedded Systems 

* Orthogonal Classifications I
- Static vs. Dynamic Typed
- Compiled vs. Interpreted
- Sequential vs. Parallel
- Static Linked vs. Dynamic Linked
- Safe vs. Unsafe (Crash a process or even the system)
- Simple vs. Complex
- Platform Independent Bytecode vs. Platform Dependent Assemblercode
- Platform Dependent Compiler vs. Cross Compiler

: Folie noch mal auflegen und mit Video vergleichen!
: Golang: strongly static typed, compiled, parallel, static(+dynamic) linked (flags); safe(+unsafe)
: Golang: platform dependent assembler & cross compiler

* Orthogonal classification II
.html snippets/classification.html

  **** Depends on standard or version
  ****** Depends on standard or version
  ******** interpreted languages are not linked

: Folie noch mal auflegen und mit Video vergleichen!
: Golang: strongly static typed, compiled, parallel, static(+dynamic) linked (flags); safe(+unsafe)
: Golang: platform dependent assembler & cross compiler

* Some Thoughts
- There are many solutions for a given problem
- The "best" language is nothing without a proper ecosystem (Libraries, Examples, Community, Developers)
- There are straight forward choices for a given platform (Mac: Swift + Objectiv-C, Linux: C + Python, Android: Java)
- Don't expect "Magic" from programming Languages
- Clean code and good programming is orthogonal to the language
- Learn more than one programming language at a professional level
- “There are only two kinds of languages: the ones people complain about and the ones nobody uses.”
  Bjarne Stroustrup, The C++ Programming Language

: z.B. Ablehnung von Kotlin wegen mangelnden Entwicklern und Mächtigkeit
