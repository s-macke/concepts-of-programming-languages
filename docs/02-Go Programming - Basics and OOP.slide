Go Programming - Basics and OOP
Concepts of Programming Languages
12 Oct 2020
Tags: go, programming, master

Sebastian Macke
Rosenheim Technical University
sebastian.macke@qaware.de
http://www.qaware.de

* Golang
- Go is an open source programming language for distributed and parallel systems
- Go addresses the problems of C ++ backend development at Google
- The Go core team is prominent: Robert Griesheimer (Hotspot VM), Ken Thompson (UX / B) and Rob Pike (UTF-8)
- Go is actively developed since 2008 (current version 1.15)
- Go is *THE* language behind the Cloud Native Stack
.link https://www.cncf.io/
.image ./img/01-cncf-projects.png 100 1024
- All essential components are written in Go: Docker, Kubernetes, Etcd, Prometheus, Grafana -> An important reason to take a closer look at Go

* Characteristics
- Compiled (cross compiler for OS: Mac, Windows, Linux and CPU: ARM, x86 + Amd64)
- Static type system with runtime support (Reflection, Dynamic Types)
- Static linker (Single Binary) -> Ideal for Docker containers
- Focus on fast compile times (the entire Go codebase compiles in <10 seconds)
- Simple (less keywords like C - 25/32)
- Object-oriented, Functional, Parallel, Modular (vgo) and Versioned

* Hello World
.play ../src/basics/hello/main.go
- Go source files are UTF-8 encoded
- Package names are not hierarchical!
- Package import names are hierarchical!
- Public functions begin with a capital letter

* Basic Types
    var b     bool
    var s     string
    var i     int          // int
    var i8    int8
    var i16   int16
    var i32   int32
    var i64   int64
    var ui    uint         // unsigned int
    var ui8   uint8
    var ui16  uint16
    var ui32  uint32
    var ui64  uint64
    var uiptr uintptr
    var bt    byte         // alias for uint8
    var r     rune         // alias for int32 // represents a Unicode code point
    var f32   float32      // float
    var f64   float64
    var c64   complex64    // complex
    var c128  complex128
    var st    struct {x,z,y int, struct {color int}}

- The type of a variable is behind the name!

* Complex Numbers
.play ../src/basics/complex/complex.go
- The assignment ':=' is used for short variable declarations. The type is deduced implicitly
.image img/02-complex.png 150 _


* Functions and Control Structures: Example Palindrome
.code ../src/basics/palindrome/palindrome.go /IsPalindrome/,/END1 OMIT/
- The return type of a function is behind the parameter list
- Conditions (if, for) are not clipped with ()
- if, for ... statements need curly braces {}
- semicolons are omitted

* Go directly supports Unit Tests via "go test"
.code ../src/basics/palindrome/palindrome_test.go /START OMIT/,/END OMIT/
- The unit test for a file is located in a _test.go file of the same name
- TestXY functions are called automatically
- The test context testing.T controls the execution

* Functions and Control Structures: Example Palindrome (UTF-8)
.code ../src/basics/palindrome/palindrome.go /IsPalindrome2/,/END2 OMIT/
- The rune type is an alias for int32 and can store all UTF-8 characters
- `[]rune(string)` converts a string into a slice of runes
- The range operator has two return values: the position and the current value

    pos, ch := range runes

* Functions and Control Structures: Example String Reverse (UTF-8)
.code ../src/basics/types/strings/strings.go /Reverse/,/End OMIT/

* Arrays and Slices
- Arrays have a fixed length and can not resized
- Slices are views to underlying arrays 
- Slices can be resized (`append()`)
- The underlying array grows automatically (if needed)
- Both have a length and a capacity

    var array = [3]int{1, 2, 3}
    fmt.Println(array)       // -> [1 2 3]

    slice := array[0:2]      // len(slice) == 3, cap(slice) == 3

    slice = append(slice, 4) // len(slice) == 4, cap(slice) == 6
    slice = append(slice, 5) // len(slice) == 5, cap(slice) == 6

    fmt.Println(slice)       // -> [1 2 3 4 5]
    fmt.Println(array)       // -> [1 2 3]

* Functions and Control Structures: Example Palindrome (Reverse)
.code ../src/basics/palindrome/palindrome.go /IsPalindrome3/,/END3 OMIT/
- Strings, arrays are compared in Go with ==
- Slices, Maps are compared with cmp.Equal 

* Special comparison with the cmp package
    opt := cmp.Comparer (func (x, y float64) bool {
      delta := math.Abs(x - y)
      mean := math.Abs(x + y) / 2.0
      return delta / mean < 0.00001
    })

    x: = []float64 {1.0, 1.1, 1.2, math.Pi}
    y: = []float64 {1.0, 1.1, 1.2, 3.14159265359} // Accurate enough to Pi
    z: = []float64 {1.0, 1.1, 1.2, 3.1415} // Diverges too far from Pi

    fmt.Println(cmp.Equal(x, y, opt)) // -> true
    fmt.Println(cmp.Equal(y, z, opt)) // -> false
    fmt.Println(cmp.Equal(z, x, opt)) // -> false

- Comparator (Comparer) is optional (as in Java)

* Pass by value I
.code ../src/basics/pass_by_value/main.go

* Pass by value II
.html snippets/pass_by_value_table.html

* Pointer I
.code ../src/basics/swap/main.go /func swap0/,/END0 OMIT/
.code ../src/basics/swap/main.go /func swap1/,/END1 OMIT/
.code ../src/basics/swap/main.go /func swap2/,/END2 OMIT/
.code ../src/basics/swap/main.go /func swap3/,/END3 OMIT/
- The double assignment saves a variable (tmp)!
- Pointers are transferred as well as values ​​by copy
- There is no pointer arithmetic (p ++) as in C / C ++

* Pointer II
.play ../src/basics/swap/main.go /func main/,/END0 OMIT/

* The Flag API simplifies Command Line Utilities
.play ../src/basics/flags/main.go /func main/,/END OMIT/

* Maps and Slices - Example Book Index
.code ../src/basics/index/index.go /Page/,/Stringer/

* Exercise 2.1
.link https://github.com/s-macke/concepts-of-programming-languages/blob/master/docs/exercises/Exercise2.1.md
.image img/02-exercise.png 500 700

: Unterschied Pointer <-> Java Reference
: - Ref: Nicht notwendigerweise direkte Pointer (Garbage Collector Mechanik)
: - Ref: Keine Pointerarithmetik, keine Referenz auf einen Referenz
: - Ref: kein Dereferenzieren mit * notwendig
: - Ref: Normalerweise stark typisiert
: - Ref: oft nicht <null>
: - In Go, nil is the zero value for pointers, interfaces, maps, slices, channels and function types, representing an uninitialized value.

* public static void
- Thoughts about language design:
.link https://www.youtube.com/watch?v=5kj5ApnhPAE

* Object Oriented Programming - Custom Types
* Go has no classes but types and functions
.code ../src/oop/rational/rational.go /Rational/,/END1 OMIT/
.code ../src/oop/rational/rational.go /Multiply/,/Multiply OMIT/
.code ../src/oop/rational/rational.go /NewRational/,/END2 OMIT/

* The typical OO Syntax (object.method()) is supported in Go
.code ../src/oop/rational/rational_test.go /TestRational/,/END OMIT/

* "ToString" - The Stringer Interface
.code ../src/oop/rational/rational.go /Stringer/,/Stringer OMIT/
    r1 := NewRational(1, 2)
    fmt.Println(r1) // -> (1/2)

- Works for any type
    type number int64
    func (n Number) String() string {
      return fmt.Sprintf(% x, n)
    }

* The Base Type for Container is the Empty Interface (interface{})
.code ../src/oop/stack/stack.go /Stack/,/END OMIT/

* The Downcast Syntax is similar to a Function Call
.code ../src/oop/stack/stack_test.go /TestCasting/,/END OMIT/
- Object types (e.g., Containers) are used by pointers (no copies)
- Data types (e.g., Money, Date, ...) are used by value (copies)
- The downcast is safe (== dynamic_cast in C ++ or cast in Java)
- No dereference (*s) is needed to call a method

* Exercise 2.2
.link https://github.com/s-macke/concepts-of-programming-languages/blob/master/docs/exercises/Exercise2.2.md
.image img/02-exercise.png 500 700
