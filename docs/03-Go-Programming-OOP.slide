Go Programming - OOP
Concepts of Programming Languages
Tags: go, programming, master

Sebastian Macke
Rosenheim Technical University
Sebastian.Macke@th-rosenheim.de
https://www.qaware.de

* Last lecture
- Types (string, int, bool, float64, ...)
- weak vs. strong typing, statically vs. dynamically typed.
- Functions and Control Structures
- Arrays, Slices and Maps
- Pointer
- Unit Tests

* Last Exercise
- Let's look at an example implementation

: Ergebnisse der Übungen zeigen.

* Error Handling
.image ./img/error_meme.jpg 400 _

* Errors in Go

Go doesn't have try-catch exception based error handling.
Go distinguishes between recoverable and unrecoverable errors:

_Recoverable_: e. g. file not found

- Go returns the error as one of the return values

	err := ioutil.WriteFile(src.Name(), []byte("hello"), 0644)
	if err != nil {
		log.Error(err)
	}

_Unrecoverable_: array access outside its boundaries, out of memory

* Go defer: run code before function exists

The "defer" statement lets us ensure that code runs before a function exits

    f, err := os.Open("myfile.txt")
    if err != nil {
        return err
    }
    defer f.Close() // Will be executed on function exit, even in case of an unrecoverable error.
    ....
    // read, write

* unrecoverable error: panic and recover by using defer
.play ../src/basics/panic/panic.go  /func getElement/,/EOF OMIT/


* Exception Pro and Cons

- What do you think are the pros and cons of exceptions?
- Miro Board ...

: * Exception Pro and Cons

: What are the pro and cons about Exceptions and return values?

: Pro Exceptions:

: - Separate error handling code from the normal program flow
: - Exceptions are harder to ignore
: - Exceptions can carry a lot of extra information
: - Exceptions are easily propagated through the system

: Contra Exceptions:

: - Difficult to analyze if stack unwinding lead to further errors. E. g. Exceptions in Exceptions. Unexpected resource leaks
: - Exceptions can have more side effects
: - Exceptions are expensive

: * Return values Pro and Cons

: Pro error return code:

: - Easier to understand
: - Multiple return values are a good fit. It does not overload the return value
: - Better controllable than Exceptions.

: Contra error return code:

: - Handling errors is verbose and repetitive (4x more Code in average)
: - you have to propagate the error through your call stack yourself

: Hier die Begründung von Google: https://golang.org/doc/faq#exceptions


* Object Oriented Programming

: * The Downcast Syntax is similar to a Function Call
: .code ../src/oop/stack/stack_test.go /TestCasting/,/END OMIT/
: - Object types (e.g., Containers) are used by pointers (no copies)
: - Data types (e.g., Money, Date, ...) are used by value (copies)
: - The downcast is safe (== dynamic_cast in C ++ or cast in Java)
: - No dereference (*s) is needed to call a method

: * Generics
:
: - Go is either type safe + use-case specific or type-unsafe + use-case agnostic.
: - This changes with Go 1.18

:    type comparable interface {
:        type int, int8, int16, int32, int64,
:        uint, uint8, uint16, uint32, uint64,
:        float32, float64
:    }

:    func max[T comparable](x T, y T) T {
:        if (x > y) {
:            return x;
:        }
:        return y;
:    }

: https://stackoverflow.com/questions/62147158/operator-not-defined-for-t
: https://go2goplay.golang.org/p/XF6wM3JF2QM
: https://www.linkedin.com/pulse/functional-programming-go-118-generics-ani-channarasappa

: "ToString" - The Stringer Interface
: .code ../src/oop/rational/rational.go /Stringer/,/Stringer OMIT/
:    r1 := NewRational(1, 2)
:    fmt.Println(r1) // -> (1/2)
: - Works for any type
:    type number int64
:    func (n Number) String() string {
:      return fmt.Sprintf(% x, n)
:    }

: * The Base Type for Container is the Empty Interface (interface{})
: .code ../src/oop/stack/stack.go /Stack/,/END OMIT/

* Structure of object oriented programming

*Wikipedia*: Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects", which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods).

- *Classes*: Data and methods which acts on the data. Blueprint for objects

- *Objects*: instances of classes

- *Fields*, *attributes*, *properties*: State of the object

- *Procedure*, *Methods*: Associated to an object.

: Deutsche Wikipedia vorher zeigen https://de.wikipedia.org/wiki/Objektorientierte_Programmierung

* Principles of Object Oriented Programming

- *Encapsulation:* Bundling of data with the methods that operate on that data. Select what is public accessible and what is private.  Ensure that the consistency of the data is maintained.
- *Abstraction:* Provide abstraction of a class without the implementation. Manage the complexity by hiding.
- *Inheritance:* Based class upon another class. Goal is reusing the parent class properties.
- *Polymorphism:* Objects of different types can be accessed through the same interface or the use of a single variable to represent different types

Go is not a pure object oriented programming language but
allows an object-oriented style of programming

: No inheritance in Go, but embedding and delegation
: Polymorphism: implicit in Go

: * Object Oriented Programming
: - Classes: data and procedures
: - Objects: instances of classes
: - Class-based vs. Prototype-based
: - Encapsulation
: - Polymorphism
: - Composition, inheritance, and delegation
: - Delegation vs. Consultation or Forwarding

: Class-based: Classes first, e.g. Java. Objects are instantiated based on classes
: Prototype-based: Objects first, e.g. Javascript. Classes do not exist, but exactly one link to a prototype exists
: Encapsulation: via upper-/lowercase in Go
: Polymorphism: implicit in Go
: Composition: Objects can contain other objects in their instance variables
: Inheritance: not supported in Go
: Delegation: evaluating a member of one object (the receiver) in the context of another original object (the sender)

: https://flaviocopes.com/golang-is-go-object-oriented/
: https://code.egym.de/introduction-to-oop-in-golang-e4841a9c4e3e

* Encapsulation I: No classes, but structs

.play ../src/oop/constructor/rational.go /Rational/,/END OMIT/

- Capitalized fields are public outside of the package. E. g. *Rational* and *NewRational* are public while *Rational.numerator* and *Rational.denominator* are not.

: Go has no classes but types and functions

* Encapsulation II: Bind together code and data it manipulates

- Classical Procedural syntax (Used often in C)

  // Multiply method for rational numbers
  func Multiply(r Rational, y Rational) Rational {
      return NewRational(r.numerator*y.numerator, r.denominator*y.denominator)
  }

- Object Oriented style syntax

  // Multiply method for rational numbers
  func (r *Rational) Multiply(y Rational) Rational {
      return NewRational(r.numerator*y.numerator, r.denominator*y.denominator)
  }

  r1 := NewRational(1, 2)
  r2 := NewRational(2, 4)
  r3 := r1.Multiply(r2)

The variable *r* is in both cases similar to the Java *this*, which reference to the class instance

: .code ../src/oop/rational/rational.go /Rational/,/END1 OMIT/
: .code ../src/oop/rational/rational.go /Multiply/,/Multiply OMIT/
: .code ../src/oop/rational/rational.go /NewRational/,/END2 OMIT/

: * The typical OO Syntax (object.method()) is supported in Go
: .code ../src/oop/rational/rational_test.go /TestRational/,/END OMIT/

: Object Oriented Programming - Custom Types
: Go has no classes but types and functions

* Orthogonal: Encapsulation can be done with any type

.play ../src/oop/orthogonal/int.go


* Syntax level OOP

.play ../src/oop/Syntax_OOP/syntax_oop.go

* Syntax level OOP

Encapsulation of methods is basically is just a syntax element.

    func (r *Rational) Multiply(y Rational) Rational {
     ....
    }

is internally transformed into

    func Multiply(r *Rational, y Rational) Rational {
     ....
    }

A lot of languages do it this way.

:* Syntax level OOP
: .play ../src/oop/oop_vs_procedural/bool.go
: - Go seems to convert the OOP style to procedural style. (OOP only on syntax level)


* Composition VS. Inheritance

Composition and inheritance are two ways to achieve code reuse and design modular systems

- Composition

    class Engine {
        ....
    }
    class Car {
        private Engine engine
    }

- Inheritance

  class Animal {
      ....
  }

  class Dog extends Animal {
  }


* Composition VS. Inheritance?

Composition and inheritance are two ways to achieve code reuse and design modular systems

- Composition: A design principle where objects are formed by combining multiple smaller objects
- Inheritance: A mechanism where a new class derives properties and behaviors from an existing class

- When to use which? What Pros and Cons exist?


: Pros composition
: - Flexibility
: - Loose Coupling
: - better encasulation
: - avoids fragile base class problems with partial implementations
: - easy to understand

: Cons composition
: - Could lead to more boilerplate
: - manage more objects - indirection complexity
: - no hierarchical relationship

: Pro Inheritance
: - natural hierarchies
: - less boilerplate
: - polymorphism

: Cons inheritance
: - tight coupling
: - Fragile base class
: - reduced flexibility
: - inappropriate abstractions, force relationships that don't naturally fit
: - single inheritance restriction
: - More memory, harder to compile




* The issue with inheritance

.link https://www.youtube.com/watch?v=Ng8m5VXsn8Q&t=414s

    class Runner {
        public void run(Task task) { task.run(); }
        public void runAll(List<Task> tasks) { for (Task task : tasks) { run(task); } }
    }

    class RunCounter extends Runner {
        private int count = 0;

        @override public void run(Task task) {
            count++;
            super.run(task);
        }

        @override public void runAll(List<Task> tasks) {
            count += tasks.size();
            super.runAll(tasks);
        }
    }

When I run 3 tasks with RunCounter.runAll, what value does *count* have?

* According to the Go main architects inheritance causes

- Tight Coupling
- Weak Encapsulation
- Surprising Bugs


* Embedding
- Go does of course support composition.
- But Go does not support inheritance: Go supports embedding of other structs.
.code ../src/oop/embedding0/embed.go /Point/,8

.code ../src/oop/embedding0/embed.go /ColorPoint/,16

.code ../src/oop/embedding0/embed.go /cp.x/,24

- Access to embedded field is identical to a normal field inside a struct
- Syntactically it is similar to inheritance in Java

* Polymorphism is not possible with embeddings.

    // Point is a two dimensional point in a cartesian coordinate system.
    type Point struct{ x, y int }

    // ColorPoint extends Point by adding a color field.
    type ColorPoint struct {
        Point // Embedding simulates inheritance but it is (sort-of) delegation!
        c     int
    }

    var Point p = Point{}
    var ColorPoint cp = ColorPoint{}

    p = cp // Compile Error
    p = cp.Point // Works


* Delegation of Functions in Go

- Overriding of methods is kind of supported, overloading is not!

- please check ../src/oop/runtask/runtask.go

: prints "a.bar"
: real delegation should print "b.bar", because delegation means
: evaluating the receiver member method Foo() of A in the context of the sender object B

* Polymorphism I
An interface is a set of methods

In Java:

  interface Switch {
      void open();
      void close();
  }

In Go:

  type OpenCloser interface {
      Open()
      Close()
  }

- Interfaces with very few methods end with the ending "er" (Stringer, Writer, Reader...)

* Polymorphism II

- Java interfaces are satisfied explicitly

  class Door implements Switch {
    public void Open() { ... }
    public void Close() { ... }
  }

- Go interfaces are satisfied implicitly

  type Door struct {}
  func (d *Door) Open() { ... }
  func (d *Door) Close() { ... }

*Door* implicitly satisfies the interface *OpenCloser*

Go supports polymorphism only via interfaces

* Polymorphism III: Example The stringer interface

The print functions in the *fmt* package support the following interface

    type Stringer interface {
        String() string
    }

- Every type with a String() Method is detected by the print commands and the String function is executed
- Detection if object is type of interface

    if tmp, ok := object.(Stringer); ok {
        // The object implements stringer
    }

- Issue: The detection is done at runtime.

* Polymorphism III: The stringer interface

.play ../src/oop/stringer/stringer.go

An implementation can support multiple interfaces at the same time.

* Interfaces and Polymorphism
.play ../src/oop/polymorphism/polymorphism.go /func main/,/END2 OMIT/

* Recap: Go does support a dynamic type

.play ../src/basics/dynamic/main.go /func main/,

- any is an alias for an empty *interface{}* and hence matches all types

    type any = interface{}


: * Example: Send Mail with Go: A minimal Interface
: .code ../src/oop/mail/mail.go /Message/,/END OMIT/
: - A example interface for a service-oriented component

: * Example: A type implements an interface when providing the required methods
: .code ../src/oop/mail/smtp/sender.go /type/,/END OMIT/

* Summary
- Go does support Encapsulation via an OOP style syntax
- Go does not support inheritance but type embedding (delegation without syntactic ballast)
- Implicit polymorphism means fewer dependencies and no type hierarchy
- Several interfaces can be put together to form an interface
- Interface embedding makes mocking easy
- Go supports polymorphism only via interfaces, not through classes
- https://youtu.be/Ng8m5VXsn8Q?t=414

: Inheritance can cause weak encapsulation, tight coupling and surprising bugs

: * Embedding
: .code ../src/oop/embedding/embedding.go /Introducer/,/EOE OMIT/

: * Embedding (cont.)
: .code ../src/oop/embedding/embedding.go /Employee/,/EOF OMIT/

: * Takeaways
: - Implicit polymorphism means fewer dependencies and no type hierarchy
: - Inheritance can cause weak encapsulation, tight coupling and surprising bugs
: - Struct embedding is still composition, but makes life easier
: - Interface embedding makes mocking easy

* Exercise 3
.image img/03-exercise.png 600 800

* Exercise
- Implement the UML diagram with Go
- The Paint() method should print the names and values of the fields to the console
- Allocate an array of polymorph objects and call Paint() in a loop
.link https://github.com/s-macke/concepts-of-programming-languages/blob/master/docs/exercises/Exercise3.md

* Questions
- What is the difference between inheritance in Java and embedding in Go?
- How does Go support multiple inheritance? Is is supported for interfaces and types?

* Multiple embeddings of same variable or function names
.code ../src/oop/multiple_inheritance/multi.go /Foo/,
