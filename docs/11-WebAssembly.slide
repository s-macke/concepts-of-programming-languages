WebAssembly
Concepts of Programming Languages
19 Dec 2022
Tags: go, programming, master, webassembly,  cross-compilation


Sebastian Macke
Rosenheim Technical University
Sebastian.Macke@th-rosenheim.de
https://www.qaware.de

: * Content
: - What is WebAssembly?
: - Design
: - Demo in WAT and C
: - Hello world in Go
: - Exercise
: - Calls from and to WebAssembly
: - Exercise
: - Future of WebAssembly


* What is WebAssembly?

: .link https://webassembly.org

- WebAssembly is a portable binary-code format for executable programs.

 - 1995: JavaScript is developed within 10 days by Brendan Eich

 - ... Java Applets, Flash, ActiveX, Silverlight
 - ... JavaScript improvements, ...

 - 2015: First presentation of WebAssembly from the W3C WebAssembly Working Group
 - 2016: Google, Microsoft and Mozilla show their first implementations
 - 2017: WebAssembly is offically supported by all Web Browsers
 - 2019: A WebAssembly system interface is specified for portable applications outside the browser
 - 2022: Docker suggests Wasm as an alternative to containers
 - Now:  WebAssembly is constantly enhanced (https://webassembly.org/roadmap/)

*After* *the* *introduction* *of* *JavaScript* *in* *the* *90s,* *it* *is* *the* *second* *language* *supported* *directly* *by* *web* *browsers*

.image ./img/08-webassembly/01-04-js-interop-00-A-768x432.png _ 200

* What is WebAssembly?

- WebAssembly is designed as a portable target for compiling high-level languages
.image ./img/08-webassembly/0a-portability.png 450 _

* JavaScript vs. WebAssembly?

- JavaScript requires a complex optimization
.image ./img/08-webassembly/0a-javascript-compilation.png

- WebAssembly simplifies processing
.image ./img/08-webassembly/0a-webassembly-compilation.png

: Show example with int and double and deoptimizatzion in JavaScript

* Design
- *Binary* *format*:

    - small size and easy to interpret

- *Stack* *Machine* *with* *local* *and* *global* *variables*:

  - Efficient decoding and compilation

- *Structured* *control* *flow* *and* *structured* *use* *of* *the* *stack*:

  - One-Pass Verification

- *Simple* *types:* *i32,* *i64,* *f32,* *f64*

  - Representation of today's CPU architecture

* Design

-  Linear memory with load/store addressing

    - Sandboxed
    - 64kB segment. Enables hardware-supported boundary check
    - Size adaptable at runtime

- Interface via defined interface

    - Export/import of functions, global variables and so-called tables

- Assembler text format

    - Open and possibility for debugging

* Stackmachine in Detail

.image ./img/08-webassembly/0a-bytecode.png _ 1000

* Demo in WebAssembly Text Format
- Example in `src/webassembly/wat` folder
add.wat

.code ../src/webassembly/wat/add.wat

add.js

.code ../src/webassembly/wat/add.js

* Supported languages in 2022

- Source:
.link https://github.com/appcypher/awesome-wasm-langs
    🐥 Net                         🐥 AssemblyScript          🥚 Astro Unmaintained
    🐥 Brainfuck                   🐥 C                       🐥 C#
    🐥 C++                         🐥 Clean                   🥚 Co
    🐥 COBOL                       🐣 D                       🐣 Eel
    🐣 Elixir                      🐥 F#                      🥚 Faust
    🥚 Forest                      🐥 Forth                   🐥 Go
    🥚 Grain                       🥚 Haskell                 🐣 Java
    🐣 JavaScript                  🥚 Julia                   🐣 Idris Unmaintained
    🐣 Kotlin/Native               🥚 Kou                     🐣 Lisp
    🐥 Lobster                     🐥 Lua                    🐣 Lys
    🐥 Never                       🥚 Nim                     🥚 Ocaml
    🐣 Perl                        🐣 PHP                     🥚 Plorth
    🐣 Poetry                      🐣 Python                  🐣 Prolog
    🐣 Ruby                        🐥 Rust                    🐣 Scheme
    🐣 Scopes                      🐣 Speedy.js Unmaintained  🐣 Swift
    🐣 Turboscript Unmaintained    🐥 TypeScript              🐥 WebAssembly
    🐥 Zig

* Demo in C

- Example in `src/webassembly/C` folder
add.c

.code ../src/webassembly/C/add/add.c

add.js

.code ../src/webassembly/C/add/add.js

* Demo in Go

.code ../src/webassembly/go/hello/main.go

index.html

.code ../src/webassembly/go/hello/index.html

* Exercise

.link https://github.com/s-macke/concepts-of-programming-languages/blob/master/docs/exercises/Exercise11.md

- Write a Hello world App in Go and execute it as node app or in the browser.

- Javascript or WebAssembly doesn't support concurrency and are single threaded.
  Test Go concurrency for the wasm compile target.

- Webassembly does not support Coroutines either, e.g. blocking calls such as time.Sleep(1 * time.Second).
  Test blocking calls.

* WebAssembly and Go Routines
- Webassembly does not support concurrency yet. Also no event timers for the scheduler
- However go executables run in the browser. How is that possible?

.play ../src/webassembly/go/concurrent/main.go /func List/,

- Go supports concurrency when you execute the Scheduler on purpose

: * Webassembly and Coroutines

: - Webassembly does neither support concurrency, nor coroutines
: - However you can mimic coroutines without runtime support via switch case. Some sort of fake gotos.

:    function foo(state *int, vars *local_vars) { // all variables must be handled in a global context
:        for(;;) {
:            switch(state) {
:                case 0:
:                    // do_this ....
:                    state = 1
:                    // you can temporarily return here
:                case 1:
:                    // do_that ....
:                    state = 2
:                case 2:
:                    // do_something
:                    return
:            }
:        }
:    }

* Applications
.link https://webassembly.org/docs/use-cases/

- Better execution for languages and toolkits that are currently cross-compiled to the Web (C/C++, GWT, …).
- Image / video editing.
- Games:
 - Casual games that need to start quickly.
 - AAA games that have heavy assets.
 - Game portals (mixed-party/origin content).
- Peer-to-peer applications (games, collaborative editing, decentralized and centralized).
-  Music applications (streaming, caching).
-  Image recognition.
-  Live video augmentation (e.g. putting hats on people’s heads).

* Applications
-  VR and augmented reality (very low latency).
-  CAD applications.
-  Scientific visualization and simulation.
-  Interactive educational software, and news articles.
-  Platform simulation / emulation (ARC, DOSBox, QEMU, MAME, …).
-  Language interpreters and virtual machines.
-  POSIX user-space environment, allowing porting of existing POSIX applications.
-  Developer tooling (editors, compilers, debuggers, …).
-  Remote desktop.
-  VPN.
-  Encryption.

* Outside the browser
- Game distribution service (portable and secure).
- Server-side compute of untrusted code.
- Server-side application.
- Hybrid native apps on mobile devices.
- Generic Plugins for your software.

* Calls from and to Go

.code ../src/webassembly/go/call/main.go

* Calls from and to Go

index.html

.code ../src/webassembly/go/call/index.html /const/,/script/

* Exercise

.link https://github.com/s-macke/concepts-of-programming-languages/blob/master/docs/exercises/Exercise11.md

- Reverse Polish Calculator in the browser
- Show generated image in the browser

* Future - The Skill Tree
.image ./img/08-webassembly/01-07-runtime-09-final-e1539904436477-768x489.png _ 800

* Future - MVP
.image ./img/08-webassembly/01-01-mvp-03-final-e1539905426663-768x664.png _ 600

* Future
.image ./img/08-webassembly/01-02-heavyweight-03-P-07-e1540219610872-768x551.png _ 700

* Future
.image ./img/08-webassembly/01-02-heavyweight-04-final-e1540219657102-768x696.png _ 500

* Future
.image ./img/08-webassembly/01-04-js-interop-02-P-05-e1540220264112-768x395.png _ 700

* Future

.image ./img/08-webassembly/01-04-js-interop-03-final-e1540220313636-768x415.png _ 900

* Future

.image ./img/08-webassembly/01-05-high-level-03-P-04-e1540220662110-768x240.png _ 800

* Future

.image ./img/08-webassembly/01-05-high-level-04-final-e1540220704600-768x621.png _ 700

* Future

.image ./img/08-webassembly/01-07-runtime-09-final-e1539904436477-768x489.png _ 900



* Links

- Awesome-wasm, Curated list of awesome things regarding WebAssembly
.link https://github.com/mbasso/awesome-wasm

- WasmWeekly, WebAssembly Today, Newletter
.link https://wasmweekly.news/
.link https://webassemblytoday.substack.com/

- Webassembly Binary Toolkit
.link https://github.com/WebAssembly/wabt

- Binaryen, Compiler infrastructure and toolchain library
.link https://github.com/WebAssembly/binaryen

* Links

- WebAssembly Studio
.link https://webassembly.studio/

- WebAssembly Roadmap
.link https://webassembly.org/roadmap/


# Polls
# Ist euch WebAssembly ein Begriff?
# Ja, Nein

# Habt Ihr in JavaScript bereits programmiert?
# Ja, Nein

# Wird Concurrency im Browser funktionieren?
# Ja, Nein

