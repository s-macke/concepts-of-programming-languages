Welcome
Concepts of Programming Languages - TH Rosenheim - WS 2024/2025
Tags: go, golang, programming, master

Sebastian Macke
Rosenheim Technical University

* About me:

- Lead Software Engineer at QAware (Munich, Mainz, Rosenheim)
-- [[https://qaware.de]]
-- Dienstleister für Cloud Native Anwendungen

- Software Developer as a hobby (Reverse Engineering, Simulations, Emulations, AI):
-- [[https://github.com/s-macke]]
-- [[https://simulationcorner.net]]

- AI enthusiast
-- Newsletter: [[https://www.linkedin.com/newsletters/qaware-ai-insights-7222227604580225024/]]

- Email: Sebastian.Macke@th-rosenheim.de

* There are so many Languages ...
.image ./img/00-programming-languages.jpeg 460 _

Miro Board: https://miro.com/app/board/.....

: Miro Bord
: Fragen, welche Sprachen ihr so alle kennt.
: https://en.wikipedia.org/wiki/List_of_programming_languages

* What are concepts of programming languages?

- Syntax (Basic vocabulary, grammar)
- Semantics (The meaning of the program)
- Names (variabes, types, functions, classes, objects, but also scope, visibility, lifetime)
- Data Types (simple, structured)
- Flow control (for, if, ....)
- Functional programming (function as first class citizen)
- Object Oriented Programming
- Debugging
- Exception handling
- Concurrency handling
- Memory management

* Goal of the Course

.image img/go.png 200 _
- Looking beyond the horizon
- Gain knowledge about the concepts of existing programming languages
- Increased ability to learn new languages
- Learn how Go differs from other languages conceptually
- Learn how to write professional code with Golang
- Gain skills to pick the right language for a given problem

* Course Requirements
- The course is designed as a master course.
- Solid programming skills in at least one language are required.
- It is assumed that students have some skills in other programming languages.
- For most of the code examples, we will use Go (Golang) as language.

* Lectures so far planned

Lecture 1 - *About* *Overview* *Introduction*
Lecture 2 - *Introduction* *to* *Golang*. *Types* *Control* *Structures*
Lecture 3 - *Object* *Oriented* *Programming* *with* *Go*
Lecture 5 - *Large Language Models*, *Prompting*, *Copilot*
Lecture 5 - *Functional* *Programming*
Lecture 6 - *Pure* *Functional* *Programming* *With* *Haskell*
Lecture 7 - *Concurrent* *Programming*
Lecture 8 - *Distributed* *Programming*
Lecture 9 - *Cross* *Compiling* *with* *WebAssembly*
Lecture 10 - *Logic* *Programming*
Lecture 11 - .....
Lecture .. - .... *Summary* ....

: * Lectures

: Lecture xx - *Logic* *Programming*

: Lecture xx - Other Ideas:
: - Memory (Garbage Collector, Smart Pointers, Compile Time Memory Handling)
: - Strong Typing vs. Weak Typing
: - Annotations
: - Reflection
: - Dependency Injection
: - Preprocessor
: - Templates vs. Generics
: - Execution Order
: - Lexer / Parser / Compiler
: - Operator Overloading
: - Coroutines
: - Fortran Arrays
: - Reactive Programming or async functions
: Lecture xx - Summary

* Structure of this course
- Recap
- Lecture
- Student Discussions
- Introduction to Exercises
- Exercises

: Pause in der Mitte?

* Material
Learning Campus:
.link https://learning-campus.th-rosenheim.de/course/view.php?id=2993

Github: Sources, Slides (Go Present Tool)

.link https://github.com/s-macke/concepts-of-programming-languages https://github.com/s-macke/concepts-of-programming-languages


* Semester Work

- See Learning Campus for details

# 15 Minutes presentation + 7-10 pages Asciidoc document (written in English) + Software Project to exemplify

Examples:

- Compare Go *Object* *Oriented* *Programming* with:
    Ada,
    Smalltalk,
    Pascal,
    Ruby,
    C++,
    Swift,
    Eiffel,
    Objective C,
    Modula,
    Lua,
    TypeScript,
    Fortran,
    Kotlin

- Compare Go *Functional* *Programming* with:
    Elixir,
    Haskell,
    Clojure,
    F#,
    Javascript

- Compare Go *Concurrency* with:
    C via OpenMP,
    C++,
    Fortran,
    Erlang,
    Python,
    Scala,
    D,
    Occam,
    CUDA

- Compare Go *Systems* *Programming* with:
    C / C++,
    Rust,
    Ada,
    D,
    Swift

- Compare Go *Distributed* *Programming* with:
    NodeJs / JavaScript,
    Java / Quarkus,
    Python,
    Kotlin

- Compare *Go* with:
    Typescript,
    Ruby,
    Python,
    Kotlin,
    Elm,
    Elixir,
    Crystal,
    C#

: Zettel ziehen Anfang November, Tauschen möglich, Anmeldung für Prüfung nicht vergessen
: Abgabe der Arbeiten im Januar. Evtl. 10. Januar
: Präsentation evtl. 16.1. und 23.1.
: 01.11. Allerheiligen

: * Administration
: - COVID-19 rules apply. See https://www.th-rosenheim.de/index.php?id=16926
: - All participants *must* be signed up to the lecture on the Learning Campus platform

* Books
Donovan, Kernigham: The Go Programming Language 
.image https://bilder.buecher.de/produkte/42/42375/42375234z.jpg 150 _

Sebesta: Concepts of Programming Languages 
.image https://pictures.abebooks.com/isbn/9780321493620-us.jpg 150 _

Watt: Programming Language Design Concepts
