Welcome
Concepts of Programming Languages - TH Rosenheim - WS 2020/2021
05 Oct 2020
Tags: go, programming, master

Sebastian Macke
Rosenheim Technical University
sebastian.macke@qaware.de
http://www.qaware.de

: Selbst vorstellen

* There are so many Languages ...
.image ./img/00-programming-languages.jpeg 550 1000

* Course Requirements
- The course is designed as a master course.
- Solid programming skills in Java/C/C++ are required.
- It is assumed that students have some skills in other programming languages such as Scala, Python or Ruby.
- For most of the code examples, we will use Go (Golang) as language.

* Goal of the Course

.image img/go.png
- Learn how Go differs from other languages conceptually 
- Gain skills to pick the right language for a given problem
- Knowledge about the concepts of existing programming languages
- Learn how to write professional code with Golang

* Lectures

Lecture 1 - *About* *Overview* *Introduction*

Lecture 2 - *Introduction* *to* *Golang*

Lecture 3 - *Object* *Oriented* *Programming* *with* *Go*

Lecture 4 - *Functional* *Programming*

Lecture 5 - *Concurrent* *Programming*

Lecture 7 - *Distributed* *Programming*. How to Write a Service

Lecture 8 - *Systems* *Programming*

Lecture 9 - *The* *Road* *not* *taken*. *Lisp* *and* *Forth*

Lecture 10 - *Cross* *Compiling* *with* *Webassembly*

Lecture 11 - *Enterprise* *Programming* *and* *Modules*

* Lectures

Lecture 12 - *Logic* *Programming*

Lecture xx - Other Ideas:
 - Memory (Garbage Collector, Smart Pointers, Compile Time Memory Handling)
 - Annotations
 - Reflection
 - Templates
 - Strong Typing vs. Weak Typing
 - Preprocessor
 - Lexer / Parser / Compiler
 - Operator Overloading
 - Coroutines
 - async functions
 - Fortran Arrays
 - Parallel Computing
 - Partitioned global address space
 - Javascript Worker Threads
 - Reactive Programming

Lecture xx - Summary

* Structure of this course
- Recap
- Lecture
- Online Tutorials (Video)
- Student Discussions
- Introduction to Exercises
- Exercises

: Pause in der Mitte?

* Material
Learning Campus: PDFs only
.link https://learning-campus.fh-rosenheim.de/course/view.php?id=2993

Github: PDFs, Sources, Slides (Go Present Tool)
.link https://github.com/s-macke/concepts-of-programming-languages


* Semester Work
15 Minutes presentation + 5-10 pages Asciidoc document (written in English)

Examples:

- Compare Go *Object* *Oriented* *Programming* with:
    Ada
    Smalltalk
    Pascal
    Ruby
    C++
    Swift
    Eiffel
    Objective C
    Modula
    Lua
    TypeScript
    Fortran

- Compare Go *Functional* *Programming* with:
    Elixir
    Haskell
    Clojure
    F#
    Javascript

- Compare Go *Concurrency* with:
    C++
    Fortran
    Erlang
    Python
    Scala
    D
    Occam

- Concurrency and Parallel Computing in:
    C with OpenMP
    Fortran
    CUDA
    Compute Shader

- Compare Go *Systems* *Programming* with:
    C / C++
    Rust
    Ada
    D
    Swift

- Compare Go *Distributed* *Programming* with:
    NodeJs / JavaScript
    C++
    Java / Quarkus
    Python

- Compare *Go* with:
    Typescript
    Ruby
    Python
    Kotlin
    Elm
    Elixir
    Crystal

: Zettel ziehen Anfang November, Tauschen möglich, Anmeldung für Prüfung nicht vergessen
: Abgabe der Arbeiten Januar (18. Januar?)
: Präsentation 11.1. und 18.1.
: (23.11. entfällt eventuell)

* Administration
- COVID-19 rules apply (use same place, wear mask if < 1.5m, ventilation, ...)
- All participants *must* be signed up to the lecture on the Learning Campus platform
- Attendance check for contact tracking

* Books
Donovan, Kernigham: The Go Programming Language 
.image https://d3by36x8sj6cra.cloudfront.net/assets/images/book/large/9780/1341/9780134190440.jpg 200 200

Sebesta: Concepts of Programming Languages 
.image https://img.yumpu.com/59461192/1/358x441/concepts-of-programming-languages-robert-w-sebesta.jpg?quality=85 200 200

Watt: Programming Language Design Concepts