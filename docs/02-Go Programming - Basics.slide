Go Programming - Basics
Concepts of Programming Languages
Tags: go, programming, master

Sebastian Macke
Rosenheim Technical University
Sebastian.Macke@th-rosenheim.de
https://www.qaware.de

* Last Lecture:

- Introduction
- The many ways to characterize a language
- Go Introduction

- Characteristics of a Successful Language
-- Miro Board ....

* Characteristics of a Successful Language (Suggestion)
- Simplicity and readability (Small instruction set and easy syntax)
- Abstraction (types/classes, Generics, Procedures ....)
- Efficiency
- Reliability (compatibility, error checking, no memory leaks)
- Dependency management
- Good support and documentation (public compilers, tutorials, community, IDE)
- Orthogonality

* What is an Orthogonal language

- *Def* *1:* A language is orthogonal if its features are built upon a small, mutually *independent* set of primitive operations.
- *Def* *2:* We can combine the majority of the language constructs in many ways without any side effects
- *Def* *3:* A language is non-orthogonal when combinations of features behave inconsistently or unexpectedly.
- Other definitions:
.link https://stackoverflow.com/questions/3272019/is-java-orthogonal
- Associated with simplicity and consistency.
- The more orthogonal the design, the fewer exceptions.
- The Go language was designed with orthogonality in mind.

: http://www.javawenti.com/?post=39930

* Orthogonal Design by an example

- Type System is a "feature"
- Functions are a "feature"
- Types are used in functions as parameters or return values.
- Orthogonal would mean, that the type system is independent of the functions.
- E. g. The behaviour of the type is not influenced by a function or vice-versa.

* Types VS. Functions (Non-Orthogonal Design by example)
- E. g. in C, the type system is not orthogonal to the function system.

    // Ints are allowed to return
    int returnint() {
        return 1;
    }

    // Structs are allowed to return
    typedef struct{} structdef;
    structdef returnstruct() {
        structdef mystruct;
        return mystruct;
    }

    // Arrays are not allowed to return
    int[3] returnarray() {
        static int myarray[3] = {1, 2, 3};
        return myarray;
    }

- But arrays in structs are allowed to return

* Every number in Java is the same. Right?

Numbers and classes might be non-orthogonal in Java.

    Integer a = 1000;
    Integer b = 1000;
    System.out.println(a == b); // false

    Integer a = 1;
    Integer b = 1;
    System.out.println(a == b); // true

: https://www.jdoodle.com/online-java-compiler

* Other non-orthogonal examples

- In C, "a++" behaves different for an integer a than for a pointer a.
--  Go doesn't allow this operation.

- In Java, there are three kinds of loops: for, while, do-while.
--  In Go, there is only one loop: for

- In Java the way variables are stored depends on their types.

    int x; // x is a value
    MyClass y; // y is a reference

-- Go has pointers and values. But the way they are stored is the same.

: https://www.cs.csub.edu/~melissa/cs350-f15/notes/notes01.html


* Golang
.image ./img/golang_meme.jpeg 500 _

* Golang
- Go is an open source programming language for distributed and parallel systems
- Go addresses the problems of C ++ backend development at Google
- The Go core team is prominent: Robert Griesheimer (Hotspot VM), Ken Thompson (UX / B) and Rob Pike (UTF-8)
- Go is actively developed since 2008
- Go is *THE* language behind the Cloud Native Stack
.link https://www.cncf.io/
.image ./img/01-cncf-projects.png 100 1024
- All essential components are written in Go: Docker, Kubernetes, Etcd, Prometheus, Grafana -> An important reason to take a closer look at Go


* TypeScript will be written in Go

- Some build systems for the JavaScript ecosystem  are already build in Go: esBuild, vite

- Anders Hejsberg: Microsoft Technical Fellow and lead architect of TypeScript. Original designer of C#, Delphi, and Turbo Pascal.
.link https://devblogs.microsoft.com/typescript/typescript-native-port/




* Tools

*go* *env*  Print Go environment information

*go* *run* *file.go* just runs the code. Can be multiple files, too.

*go* *build* downloads dependencies and builds the executable, but needs a go.mod file.

*go* *tool* *dist* *list* list all supported platforms

*env* *GOOS=darwin* *GOARCH=arm64* *go* *build* Build for Apple ARM CPU computers.

*go* *fmt* formats your files

*go* *mod* *init* creates a go.mod module file

- module file contains language version information, module name and dependencies

*go* *mod* *tidy* updates the go mod file if you add more dependencies

* Golang compiler source code compiles in 36 seconds

*Go* *compiles* *fast*

    time ./make.bash
    Building Go cmd/dist using /opt/homebrew/Cellar/go/1.23.0/libexec. (go1.23.0 darwin/arm64)
    Building Go toolchain1 using /opt/homebrew/Cellar/go/1.23.0/libexec.
    Building Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.
    Building Go toolchain2 using go_bootstrap and Go toolchain1.
    Building Go toolchain3 using go_bootstrap and Go toolchain2.
    Building packages and commands for darwin/arm64.
    ---
    Installed Go for .../go-src/go
    Installed commands in .../go-src/go/bin
    *** You need to add /Users/sebastian.macke/projects/QAware/vorlesung/go-src/go/bin to your PATH.
    ./make.bash  167,89s user 43,26s system 580% cpu 36,367 total

GCC C++ compile time: several hours
Rust: hours
Java compile time: several hours


: Live Demo
: go.mod im Hauptverzeichnis vorher löschen
: gehe zu src/basics/hello
: zeige zum Beispiel wie Abhängigkeit auf github.com/antlr/antlr4/runtime/Go/antlr funktioniert
: There is no central repository of go packages.

: zeige cross compilation
: go tool dist list
: in git bash console
: GOARCH=arm64 GOOS=darwin go build

* Packages

.play ../src/basics/hello/main.go

- The entry point for Go executable is always the function main in package main (main.main)
- New packages need a new directory and can then be referenced
- *Public* *functions* *begin* *with* *a* *capital* *letter*
: - Package import names are hierarchical
: - Package names are not hierarchical!

: neues Verzeichnis mit Paket anlegen und zeigen, wie man von main darauf zugreift

* Primitive Types
- Basic building block of a programming language
- They are not defined in terms of other data types
- Usually designed with the CPU architecture in mind

* Primitive Types
.html snippets/basic_types.html
- In Go the type of a variable is behind the name!

: Frage: Typen in Javascript und Python. weniger Zahlentypen bedeutet weiter weg von der Hardware.
: Systemsprache hat viele Typen um alle Low-Level Datenstrukturen abzubilden.
: Auch Unterscheidung zwischen unsigned und signed, was immer wieder zu Problemen führt. Siehe später
: String ist hier auch primitiv. Aber nicht in allen Sprachen. Zum Beispiel C.

* Complex Numbers
.play ../src/basics/complex/complex.go
- The assignment ':=' is used for short variable declarations. The type is deduced implicitly. Also called "type inference"
.image img/02-complex.png 150 _

* All primitive types are value types

Value types are primitive data types (int, double, boolean, etc.) that directly store their values in memory rather than referencing an object.

.play ../src/basics/types/values/value-type.go /func foo/,


* Weak typing vs. Strong typing I
Languages differ of how serious they handle the type

- type conversions implicit or explicit
- strict or loose typing rules at compile time
- dynamic types (runtime types) allowed or not

* Weak typing vs. Strong typing II

.image img/02-typing.png 250 _

- weakly typed: allow implicit conversions
- strongly typed: don't allow implicit conversions
- statically typed: type checking at compile time
- dynamically typed: type checking at runtime

Go uses a strong typing system. But why?

: Frage an Studenten: bitte ausfüllen.

: * Weak typing vs. Strong typing II

: .image img/02-typing.png 450 _

* Where implicit type conversion in C goes wrong

    int main() {
        signed int a = -1;
        unsigned int b = 0;

        if (a < b) {
            printf("a ís smaller than b\n");
        }

        return 0;
    }

Also: Change int to char


: https://www.onlinegdb.com/online_c_compiler
: change int to char

* Javascript is very creative with type coercion
.image ./img/banana_meme.png 400 _

: https://jsconsole.com/
: 4 + "7" -> conversion to strings
: "4" + 7
: 4 - "7" -> conversion to number
: "4" - "7" -> conversion to number
: "" - "" => 0
: 4 * "7" -> conversion to numbers
: 2 + true
: false - 3
: "" - "" => 0
: 0 == "" -> true
: new Array() == false
: {} + {} => "[object Object][object Object]"    (typeof ({} + {}) is string)
: {} + [] => 0
: {} + {} + [] => "NaN" as string
: ({} + {}) + [] => ""
: {} + ({} + []) => NaN as number
: ({} + {} + []) => ("[object Object][object Object]")
: ("NaN") => "NaN"
: 0 > null => false
: 0 >= null => true
: 0 === null => false
: [1,2,3] + [4,5,6] => "1,2,34,5,6"
: http://www.jsfuck.com/
: parseInt(1)
: parseInt(0.0000001)
: "" + 0.00000001
: 018 == '018'
: 017 == '017'

* Dynamically typing in Python

    x = 10        # x is an int
    x = "hello"   # now x is a str

---

    def greet(**kwargs):
        for key, value in kwargs.items():
            print(f"{key} = {value}")

    greet(name="Alice", age=30, city="Munich")

---

    def dynamic(value):
        if value > 0:
            return "positive"
        else:
            return -1


* Strong typing in Go

.play ../src/basics/types/cast/cast.go

- In Go there is no implicit type cast.
- The compiler will complain if you try to compare different types.
- You have to do the type conversion explicitly.

*  The many ways of variable declarations in Go

    var foo int  // default value zero
    foo = 32

    var foo int = 32

    var foo = 32

    foo := 32  // infers (guesses) the type definition of type int

    foo := int(32)

    foo, ok := 32, true // foo is an int 32, ok is a boolean with value true


* Go has also a dynamic type: any

.play ../src/basics/dynamic/main.go /START OMIT/,/END OMIT/

: - The downcast is safe (== dynamic_cast in C++ or cast in Java)


* Type systems in other languages

.image img/02-typing.png 450 _
- Miro board ....

* Golang - complex types


* Maps

- Maps are Go's built-in associative data type (sometimes called hashes or dicts in other languages).

.play ../src/basics/types/maps/maps.go
: /START OMIT/,/END OMIT/

* Map is a reference type

.play ../src/basics/types/references/reference-type.go


* Arrays and Slices
- Arrays have a fixed length and can not be resized
- Slices are dynamic arrays and can be resized (`append()`)

- Slices are views to underlying arrays or can be created dynamically
- The underlying array grows automatically (if needed)
- Both have a length and a capacity: What does that mean?

* Arrays and Slices

.play ../src/basics/types/slices/slices.go

* Non-Orthogonal: Arrays are value types, but slices are reference types. But they use the same syntax.

.play ../src/basics/types/non-orthogonal/non-orthogonal.go  /func/,

* Pointer I
A pointer is a variable which contains a memory address
.play ../src/basics/pointers/pointer/pointer.go /func main/,

* Pointer I
.code ../src/basics/swap/main.go /func swap0/,/END0 OMIT/
.code ../src/basics/swap/main.go /func swap1/,/END1 OMIT/
.code ../src/basics/swap/main.go /func swap2/,/END2 OMIT/
.code ../src/basics/swap/main.go /func swap3/,/END3 OMIT/
- The double assignment saves a variable (tmp)!
- Pointers are transferred as well as values ​​by copy

* Pointer II
.play ../src/basics/swap/main.go /func main/,/END0 OMIT/

: evtl. story zu multi dimension arrays in C vs. multiplikation erzählen

 Pointer arithmetic is a "DON'T DO" in Go!
- There is some unsafe pointer arithmetic as in C / C ++



* Functions and Control Structures: Example Palindrome
.code ../src/basics/palindrome/palindrome.go /IsPalindrome/,/END1 OMIT/
- The return type of a function is behind the parameter list
- Conditions (if, for) are not clipped with ()
- if, for ... statements need curly braces {}

* Go directly supports Unit Tests via "go test"
.code ../src/basics/palindrome/palindrome_test.go /START OMIT/,/END OMIT/
- The unit test for a file is located in a _test.go file of the same name
- TestXY functions are called automatically
- The test context testing.T controls the execution
- Has anyone done Test Driven Development?

* Functions and Control Structures: Example Palindrome (UTF-8)
.code ../src/basics/palindrome/palindrome.go /IsPalindrome2/,/END2 OMIT/
- The rune type is an alias for int32 and can store all UTF-8 characters
- `[]rune(string)` converts a string into a slice of runes
- The range operator has two return values: the position and the current value

    pos, ch := range runes

: * Functions and Control Structures: Example String Reverse (UTF-8)

: Bad example of usage of multiple parameters
: .code ../src/basics/types/strings/strings.go /Reverse/,/End OMIT/


* Functions and Control Structures: Example Palindrome (Reverse)
.code ../src/basics/palindrome/palindrome.go /IsPalindrome3/,/END3 OMIT/
- Strings, arrays are compared in Go with ==
- Slices, Maps are compared with cmp.Equal 

: * Special comparison with the cmp package
:    opt := cmp.Comparer (func (x, y float64) bool {
:      delta := math.Abs(x - y)
:      mean := math.Abs(x + y) / 2.0
:      return delta / mean < 0.00001
:    })

:    x: = []float64 {1.0, 1.1, 1.2, math.Pi}
:    y: = []float64 {1.0, 1.1, 1.2, 3.14159265359} // Accurate enough to Pi
:    z: = []float64 {1.0, 1.1, 1.2, 3.1415} // Diverges too far from Pi

:    fmt.Println(cmp.Equal(x, y, opt)) // -> true
:    fmt.Println(cmp.Equal(y, z, opt)) // -> false
:    fmt.Println(cmp.Equal(z, x, opt)) // -> false

: - Comparator (Comparer) is optional (as in Java)

: *  Function calling
: There are two types: Pass by value or pass by reference

:    ....
:    func inc(count int) {
:    	count++
:    }

:    func incarray1(count []int) {
:    	count[0]++
:    }

:    func incarray2(count [1]int) {
:    	count[0]++
:    }
:    ....

: - pass by value makes an internal copy, discards the value afterwards
: - pass by reference provides a direct reference to the given variable. Changes have an effect on the original value

: As optimization some structures are not copied, but passed as reference but on the first access they are copied (Copy On Write)
: Ich hatte vor kurzem eine Sprache, da konnte man auf die Funktionsparameter gar nicht schreibend zugreifen: WGSL

* Pointers

.image ./img/pointer_meme.jpeg 450 _

* Exercise 2.1
.link https://github.com/s-macke/concepts-of-programming-languages/blob/master/docs/exercises/Exercise2.1.md

.play ../src/basics/pointers/unsafe/main.go /func main/,

- Because of garbage collection anything can happen here! Even more unsafe than in C!

: In C wäre die Anpassung des Pointers nur y++

: * What are references

: References are kind of safe pointers. In different languages they have slighty different meanings and properties.

: - They all have in common, that they don't allow pointer arithmetic.
: - Usually no dererefence with * necessary
: - Normally strongly typed
: - In C++ a reference must be initialized at creation and can never be null. In this way C++ ist stricter than Java
: - In Java because of Garbage Collection the reference might not be direct pointer to the object.
: - In Go, nil is the zero value for pointers, interfaces, maps, slices, channels and function types, representing an uninitialized value.

* Maps and Slices - Example Book Index

Types can be defined with the keyword "type"

    // Page contains an array of words.
    type Page []string

    // Book is an array of pages.
    type Book []Page

    // Index contains a list of pages for each word in a book.
    type Index map[string][]int

    // MakeIndex generates an index structure
    func MakeIndex(book Book) Index {
    ....
    }

: * Stringer Interface
: .play ../src/basics/stringer/stringer.go

* The Flag API simplifies Command Line Utilities
.play ../src/basics/flags/main.go /import/,/END OMIT/

- execute the program with the argument "--help" to see the possible arguments and the suggestions

: vergleich https://stackoverflow.com/questions/7341683/parsing-arguments-to-a-java-command-line-program

: * public static void
: - Thoughts about language design:
: .link https://www.youtube.com/watch?v=5kj5ApnhPAE

* Summary

- Compiled (cross compiler for OS: Mac, Windows, Linux and CPU: ARM, x86 + Amd64)
- Static linker (Single Binary) -> Ideal for Docker containers
- Focus on fast compile times (the entire Go codebase compiles in <20 seconds)
- Simple (less keywords like C - 25/32) and Orthogonal
- Strong type system with runtime support (Reflection, Dynamic Types)

:  - Object-oriented, Functional, Parallel, Modular and Versioned

* Exercise 2.2
.link https://github.com/s-macke/concepts-of-programming-languages/blob/master/docs/exercises/Exercise2.2.md
