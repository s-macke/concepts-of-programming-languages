Go Programming - Basics
Concepts of Programming Languages
17 Oct 2022
Tags: go, programming, master

Sebastian Macke
Rosenheim Technical University
Sebastian.Macke@th-rosenheim.de
https://www.qaware.de

* Characteristics of a Successful Language (Suggestion)
- Simplicity and readability (Small instruction set and easy syntax)
- Abstraction (types/classes, Generics, Procedures ....)
- Efficiency
- Reliability (compatibility, error checking, no memory leaks)
- Dependency management
- Good support and documentation (public compilers, tutorials, community, IDE)
- Orthogonality

* What is an Orthogonal language

- Def 1: A language is orthogonal if its features are built upon a small, mutually *independent* set of primitive operations.
- Def 2: We can combine the majority of the language constructs in many ways without any side effects
- Other definitions: https://stackoverflow.com/questions/3272019/is-java-orthogonal
- Associated with simplicity and consistency.
- The more orthogonal the design, the fewer exceptions.
- The Go language was designed with orthogonality in mind.

: http://www.javawenti.com/?post=39930

* Orthogonal Design by an example

- Type System is a "feature"
- Functions are a "feature"
- Types are used in functions as parameters or return values.
- Orthogonal would mean, that the type system is independent of the functions.
- E. g. The behaviour of the type is not influenced by a function or vice-versa.

* Non-Orthogonal Design by example
- E. g. in C, the type system is not orthogonal to the function system.

    // Ints are allowed to return
    int returnint() {
        return 1;
    }

    // Structs are allowed to return
    typedef struct{} structdef;
    structdef returnstruct() {
        structdef mystruct;
        return mystruct;
    }

    // Arrays are not allowed to return
    int[3] returnarray() {
        static int myarray[3] = {1, 2, 3};
        return myarray;
    }

- But arrays in structs are allowed to return

* Other non-orthogonal examples

- In C, "a++" behaves different for an integer a than for a pointer a.
--  Go doesn't allow this operation.

- In Java, there are three kinds of loops: for, while, do-while.
--  In Go, there is only one loop: for

- In Java the way variables are stored depends on their types.

    int x; // x is a value
    MyClass y; // y is a reference

-- Go has pointers and values. But the way they are stored is the same.

: https://www.cs.csub.edu/~melissa/cs350-f15/notes/notes01.html


* Golang
- Go is an open source programming language for distributed and parallel systems
- Go addresses the problems of C ++ backend development at Google
- The Go core team is prominent: Robert Griesheimer (Hotspot VM), Ken Thompson (UX / B) and Rob Pike (UTF-8)
- Go is actively developed since 2008 (current version 1.19)
- Go is *THE* language behind the Cloud Native Stack
.link https://www.cncf.io/
.image ./img/01-cncf-projects.png 100 1024
- All essential components are written in Go: Docker, Kubernetes, Etcd, Prometheus, Grafana -> An important reason to take a closer look at Go

* Basic concepts of programming languages
- Variables and Types
- Data Structures (Arrays, Structs, ...)
- Control Structures (Loops, Conditionals, Sub Programs, ...)
- Syntax
- Handling of Modules / Libs
- Tools

* Tools

*go* *env*  Print Go environment information

*go* *run* *file.go* just runs the code. Can be multiple files, too.

*go* *build* downloads dependencies and builds the executable, but needs a go.mod file.

*go* *tool* *dist* *list* list all supported platforms

*env* *GOOS=darwin* *GOARCH=arm64* *go* *build* Build for Apple ARM CPU computers.

*go* *fmt* formats your files

*go* *mod* *init* creates a go.mod module file

- module file contains language version information, module name and dependencies

*go* *mod* *tidy* updates the go mod file if you add more dependencies

: Live Demo
: go.mod im Hauptverzeichnis vorher löschen
: gehe zu src/basics/hello
: zeige zum Beispiel wie Abhängigkeit auf github.com/antlr/antlr4/runtime/Go/antlr funktioniert
: There is no central repository of go packages.

: zeige cross compilation
: go tool dist list
: in git bash console
: GOARCH=arm64 GOOS=darwin go build

* Packages

.play ../src/basics/hello/main.go

- The entry point for Go executable is always the function main in package main (main.main)
- New packages need a new directory and can then be referenced
- *Public* *functions* *begin* *with* *a* *capital* *letter*
- Package import names are hierarchical
- Package names are not hierarchical!

: neues Verzeichnis mit Paket anlegen und zeigen, wie man von main darauf zugreift

* Primitive Types
- Basic building block of a programming language
- They are not defined in terms of other data types
- Usually designed with the CPU architecture in mind

* Primitive Types
.html snippets/basic_types.html
- In Go the type of a variable is behind the name!

: Frage: Typen in Javascript und Python. weniger Zahlentypen bedeutet weiter weg von der Hardware.
: Systemsprache hat viele Typen um alle Low-Level Datenstrukturen abzubilden.
: Auch Unterscheidung zwischen unsigned und signed, was immer wieder zu Problemen führt. Siehe später
: String ist hier auch primitiv. Aber nicht in allen Sprachen. Zum Beispiel C.

* Complex Numbers
.play ../src/basics/complex/complex.go
- The assignment ':=' is used for short variable declarations. The type is deduced implicitly. Also called "type inference"
.image img/02-complex.png 150 _

* Weak typing vs. Strong typing I
Languages differ of how serious they handle the type

- type conversions implicit or explicit
- strict or loose typing rules at compile time
- dynamic types (runtime types) allowed or not

* Weak typing vs. Strong typing II

.image img/02-typing.png 250 _

- weakly typed: allow implicit conversions
- strongly typed: don't allow implicit conversions
- statically typed: type checking at compile time
- dynamically typed: type checking at runtime

: Frage an Studenten: bitte ausfüllen.

Go uses a strong typing system. But why?

* Where implicit type conversion in C goes wrong

    int main() {
        signed int a = -1;
        unsigned int b = 0;

        if (a < b) {
            printf("a ís smaller than b\n");
        }

        return 0;
    }

: https://www.onlinegdb.com/online_c_compiler
: change int to char

* Javascript is very creative with type coercion
- Live Demo

: https://jsconsole.com/
: 4 + "7"
: 4 * "7"
: 2 + true
: false - 3
: 0 == "" -> true
: "" - "" => 0
: new Array() == false
: {} + {} => "[object Object][object Object]"    (typeof ({} + {}) is string)
: {} + [] => 0
: {} + {} + [] => "NaN" as string
: ({} + {}) + [] => ""
: {} + ({} + []) => NaN as number
: 0 > null => false
: 0 >= null => true
: 0 === null => false
: [1,2,3] + [4,5,6] => "1,2,34,5,6"
: http://www.jsfuck.com/
: ....
: ("NaN") => "NaN"
: ({} + {} +[]) => ("[object Object][object Object]")

* Strong typing in Go

.play ../src/basics/types/cast/cast.go

- In Go there is no implicit type cast.
- The compiler will complain if you try to compare different types.
- You have to do the type conversion explicitly.

* Go has a dynamic type: any

.play ../src/basics/dynamic/main.go /START OMIT/,/END OMIT/

- The downcast is safe (== dynamic_cast in C++ or cast in Java)

* Maps

- Maps are Go's built-in associative data type (sometimes called hashes or dicts in other languages).

.play ../src/basics/types/maps/maps.go

* Arrays and Slices
- Arrays have a fixed length and can not be resized
- Slices are views to underlying arrays or can be created dynamically
- Slices can be resized (`append()`)
- The underlying array grows automatically (if needed)
- Both have a length and a capacity

    var array = [3]int{1, 2, 3}
    fmt.Println(array)       // -> [1 2 3]

    slice := array[0:2]      // -> [1 2], len(slice) == 2, cap(slice) == 3

    slice = append(slice, 4) // len(slice) == 3, cap(slice) == 3
    slice = append(slice, 5) // len(slice) == 4, cap(slice) == 6

    fmt.Println(slice)       // -> [1 2 4 5]
    fmt.Println(array)       // -> [1 2 4]

: slicecap zeigen


* Functions and Control Structures: Example Palindrome
.code ../src/basics/palindrome/palindrome.go /IsPalindrome/,/END1 OMIT/
- The return type of a function is behind the parameter list
- Conditions (if, for) are not clipped with ()
- if, for ... statements need curly braces {}
- semicolons are omitted

* Go directly supports Unit Tests via "go test"
.code ../src/basics/palindrome/palindrome_test.go /START OMIT/,/END OMIT/
- The unit test for a file is located in a _test.go file of the same name
- TestXY functions are called automatically
- The test context testing.T controls the execution

* Functions and Control Structures: Example Palindrome (UTF-8)
.code ../src/basics/palindrome/palindrome.go /IsPalindrome2/,/END2 OMIT/
- The rune type is an alias for int32 and can store all UTF-8 characters
- `[]rune(string)` converts a string into a slice of runes
- The range operator has two return values: the position and the current value

    pos, ch := range runes

* Functions and Control Structures: Example String Reverse (UTF-8)
.code ../src/basics/types/strings/strings.go /Reverse/,/End OMIT/

* Functions and Control Structures: Example Palindrome (Reverse)
.code ../src/basics/palindrome/palindrome.go /IsPalindrome3/,/END3 OMIT/
- Strings, arrays are compared in Go with ==
- Slices, Maps are compared with cmp.Equal 

: * Special comparison with the cmp package
:    opt := cmp.Comparer (func (x, y float64) bool {
:      delta := math.Abs(x - y)
:      mean := math.Abs(x + y) / 2.0
:      return delta / mean < 0.00001
:    })

:    x: = []float64 {1.0, 1.1, 1.2, math.Pi}
:    y: = []float64 {1.0, 1.1, 1.2, 3.14159265359} // Accurate enough to Pi
:    z: = []float64 {1.0, 1.1, 1.2, 3.1415} // Diverges too far from Pi

:    fmt.Println(cmp.Equal(x, y, opt)) // -> true
:    fmt.Println(cmp.Equal(y, z, opt)) // -> false
:    fmt.Println(cmp.Equal(z, x, opt)) // -> false

: - Comparator (Comparer) is optional (as in Java)

: *  Function calling
: There are two types: Pass by value or pass by reference

:    ....
:    func inc(count int) {
:    	count++
:    }

:    func incarray1(count []int) {
:    	count[0]++
:    }

:    func incarray2(count [1]int) {
:    	count[0]++
:    }
:    ....

: - pass by value makes an internal copy, discards the value afterwards
: - pass by reference provides a direct reference to the given variable. Changes have an effect on the original value


: * Pass by value vs. pass by reference
: .html snippets/pass_by_value_table.html

: - In C a string is an array.
: - You can also try array of structs, structs of arrays, .....
: - Copying a structure or or array can be rather expensive and should be avoided!

: As optimization some structures are not copied, but passed as reference but on the first access they are copied (Copy On Write)
: Ich hatte vor kurzem eine Sprache, da konnte man auf die Funktionsparameter gar nicht schreibend zugreifen: WGSL

* Pointer I
A pointer is variable which contains a memory address

- 8 Byte on 64 Bit machines
- 4 Bytes on 32 Bit machines

For CPU architectures they are a natural feature. As a systems language Go support pointers

.play ../src/basics/pointers/pointer/pointer.go /func main/,

* Pointer I
.code ../src/basics/swap/main.go /func swap0/,/END0 OMIT/
.code ../src/basics/swap/main.go /func swap1/,/END1 OMIT/
.code ../src/basics/swap/main.go /func swap2/,/END2 OMIT/
.code ../src/basics/swap/main.go /func swap3/,/END3 OMIT/
- The double assignment saves a variable (tmp)!
- Pointers are transferred as well as values ​​by copy

* Pointer II
.play ../src/basics/swap/main.go /func main/,/END0 OMIT/

: evtl. story zu multi dimension arrays in C vs. multiplikation erzählen

* Exercise 2.1
.link https://github.com/s-macke/concepts-of-programming-languages/blob/master/docs/exercises/Exercise2.1.md

* Pointer arithmetic
- There is some unsafe pointer arithmetic as in C / C ++

.play ../src/basics/pointers/unsafe/main.go /func main/,

- Because of garbage collection anything can happen here! Even more unsafe than in C!

: In C wäre die Anpassung des Pointers nur y++

* What are references

References are kind of safe pointers. In different languages they have slighty different meanings and properties.

- They all have in common, that they don't allow pointer arithmetic.
- Usually no dererefence with * necessary
- Normally strongly typed
- In C++ a reference must be initialized at creation and can never be null. In this way C++ ist stricter than Java
- In Java because of Garbage Collection the reference might not be direct pointer to the object.
- In Go, nil is the zero value for pointers, interfaces, maps, slices, channels and function types, representing an uninitialized value.

* Maps and Slices - Example Book Index
.code ../src/basics/index/index.go /Page/,/Stringer/

* The Flag API simplifies Command Line Utilities
.play ../src/basics/flags/main.go /import/,/END OMIT/

- execute the program with the argument "--help" to see the possible arguments and the suggestions

: vergleich https://stackoverflow.com/questions/7341683/parsing-arguments-to-a-java-command-line-program

* public static void
- Thoughts about language design:
.link https://www.youtube.com/watch?v=5kj5ApnhPAE

* Summary

- Compiled (cross compiler for OS: Mac, Windows, Linux and CPU: ARM, x86 + Amd64)
- Static linker (Single Binary) -> Ideal for Docker containers
- Focus on fast compile times (the entire Go codebase compiles in <20 seconds)
- Simple (less keywords like C - 25/32) and Orthogonal
- Strong type system with runtime support (Reflection, Dynamic Types)


:  - Object-oriented, Functional, Parallel, Modular and Versioned

* Exercise 2.2
.link https://github.com/s-macke/concepts-of-programming-languages/blob/master/docs/exercises/Exercise2.2.md
