Introduction to Golang
Concepts of Programming Languages
05 Oct 2020
Tags: go, programming, master

Sebastian Macke
Rosenheim Technical University
sebastian.macke@qaware.de
http://www.qaware.de

* Gopher
.image https://talks.golang.org/2012/10things/gopher.jpg

: Taschenratte (heimisch in Mittel- und Nordamerika)

* Why Go?
- Go is the major language behind the Cloud Native Stack
.link https://www.cncf.io/
.image ./img/01-cncf-projects.png 100 1024
- The most important components are written in Go: Docker, Kubernetes, etcd, Prometheus, Grafana, ...
- Go is Open Source and maintained by Google
- Go is a distributed, parallel language designed for systems programming at Google to solve the problems of C++ code.

: 2007: Start der Entwicklung: Robert Griesemer, Rob Pike und Ken Thompson
: 2009: Präsentation (Video inc)
: 2012: Version 1
: 2014: Erste Gopher-Konferenz

* Hello World
.play ../src/basics/hello/main.go

* Motivation behind Google

- No new major systems language in a decade

- But much has changed
- sprawling libraries & dependency chains
- dominance of networking
- client / server focus
- massive clusters
- the rise of multi-core CPUs

- Major systems languges were not designed with all these factors in mind.

* Construction speed
- It takes too long to build software for
- The tools are slow and are getting sqlitebrowser
- Dependencies are uncontrolled
- Machines have stopped getting faster
- Yet software still grows and grows

If we stay as we are, before long software construction wil be unbearably slow

TODO: Bild einfügen xkcd.com/303/


* Palindrome
.code ../src/basics/palindrome/palindrome.go /IsPalindrome/,/END1 OMIT/
.code ../src/basics/palindrome/palindrome_test.go /START OMIT/,/END OMIT/

* Introduction to Golang
Rob Pike @ Google 2009 (60 Min)

.link https://www.youtube.com/watch?v=rKnDgT73v8s
.image img/01-go-programming-Language.png 450 700

* Type system tyranny
   ....

* Why a new language?

- These problems are endemic and linguistic
- New libraries won't help (Adding anything is going in the wrong direction)
- Need to start over, thinking about the way programs a re written and constructed

* Goals
- The efficiency of a statically-typed compiled language with the ease of programming of a dynamic language
- Safety: type-safe and memory-safe
- Good support for concurrency and communication
- Efficient, latency-free garbage collection
- High-spee compilation

* Some Questions 
- What makes Go different to other Languages? 
- What makes Go similar to other Languages?
- Discuss your personal opinions in a group of students!

: Paradigmen: nebenläufig, imperativ, strukturiert, modular, objektorientiert
: Ziele: Kompiliergeschwindigkeit, Nebenläufigkeit, Netzwerk- und Cloudcomputing
: Keine dynamisch Typumwandlung, Typen müssen immer konvertiert werden
: Zeiger, aber keine Zeigerarithmetik; Komposition statt Vererbung (Mixin)
: OOP, aber nicht klassenbasiert; Polymorophie über Interfaces mit dynamische Bindung (zur Laufzeit passende Methode aufgerufen)
: Nebenläufigkeit: Goroutinen, Channels

* Exercise 1
.link https://github.com/s-macke/concepts-of-programming-languages/blob/master/docs/exercises/Exercise1.md
.image img/01-exercise.png 500 700

* See also

.link https://github.com/s-macke/concepts-of-programming-languages
.link https://golang.org/
.link https://golang.org/doc/




